#include <dt-bindings/zmk/matrix_transform.h>
#include <dt-bindings/pinctrl/nrf-pinctrl.h>

&i2c0 {
    status = "okay";
    compatible = "nordic,nrf-twim";
    clock-frequency = <I2C_BITRATE_FAST>;    /* 400 kHz */
    pinctrl-0 = <&i2c0_custom>;
    pinctrl-1 = <&i2c0_sleep_custom>;

    mcp23017: mcp23017@20 {
        status = "okay";
        compatible = "microchip,mcp230xx";
        reg = <0x20>;
        #gpio-cells = <2>;
        gpio-controller;
        ngpios = <16>;
        int-gpios = <&gpio0 10 17>;       /* (GPIO_ACTIVE_LOW | GPIO_PULL_UP) */
    };
};

&pinctrl {
    i2c0_custom: i2c0_custom {
        group1 {
            psels = <NRF_PSEL(TWIM_SDA, 1, 0)>,
                <NRF_PSEL(TWIM_SCL, 0, 11)>;
        };
    };

    i2c0_sleep_custom: i2c0_sleep_custom {
        group1 {
            psels = <NRF_PSEL(TWIM_SDA, 1, 0)>,
                <NRF_PSEL(TWIM_SCL, 0, 11)>;
            low-power-enable;
        };
    };
};


/ {
    chosen {
        zmk,kscan0 = &kscan0;
        zmk,physical-layout = &physical_layout0;
    };

    left_encoder: encoder_left {
        compatible = "alps,ec11";
        a-gpios = <&pro_micro 19 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
        b-gpios = <&pro_micro 18 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;

        steps = <2>;
        status = "okay";                                                                                                                                                                                                                                                  
    };

    sensors: sensors {
        compatible = "zmk,keymap-sensors";
        sensors = <&left_encoder>;
        sensor-behaviors = <&inc_dec_kp>;
        triggers-per-rotation = <1>;
    };

    kscan0: kscan0 {
        compatible = "zmk,kscan-gpio-matrix";
        diode-direction = "col2row";
        wakeup-source;

        row-gpios
            = <&pro_micro 1 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
            , <&pro_micro 5 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
            , <&pro_micro 4 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
            , <&pro_micro 16 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
            , <&pro_micro 2 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
            , <&pro_micro 0 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
            // -----------------------------
            , <&pro_micro 21 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>   // encoder SW1
            ;

        col-gpios
            = <&mcp23017 7 GPIO_ACTIVE_LOW>
            , <&mcp23017 6 GPIO_ACTIVE_LOW>
            , <&mcp23017 5 GPIO_ACTIVE_LOW>
            , <&mcp23017 4 GPIO_ACTIVE_LOW>
            , <&mcp23017 3 GPIO_ACTIVE_LOW>
            , <&mcp23017 2 GPIO_ACTIVE_LOW>
            , <&mcp23017 1 GPIO_ACTIVE_LOW>
            , <&mcp23017 0 GPIO_ACTIVE_LOW>
            , <&mcp23017 15 GPIO_ACTIVE_LOW>
            , <&mcp23017 14 GPIO_ACTIVE_LOW>
            , <&mcp23017 13 GPIO_ACTIVE_LOW>
            , <&mcp23017 12 GPIO_ACTIVE_LOW>
            , <&mcp23017 11 GPIO_ACTIVE_LOW>
            , <&mcp23017 10 GPIO_ACTIVE_LOW>
            , <&mcp23017 9 GPIO_ACTIVE_LOW>
            , <&mcp23017 8 GPIO_ACTIVE_LOW> 
            , <&pro_micro 8 GPIO_ACTIVE_LOW>
            , <&pro_micro 9 GPIO_ACTIVE_LOW>
            // -----------------------------
            , <&pro_micro 20 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>   // encoder SW2
            ;
        };

        default_transform: keymap_transform0 {
            compatible = "zmk,matrix-transform";
            columns = <19>; // Length of the "col-gpios" array
            rows = <7>; // Length of the "row-gpios" array
            map = <
                RC(0,0) RC(0,2) RC(0,3) RC(0,4) RC(0,5) RC(0,6) RC(0,7) RC(0,8) RC(0,9) RC(0,10) RC(0,11) RC(0,12) RC(0,13) RC(0,15)
                RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5) RC(1,6) RC(1,7) RC(1,8) RC(1,9) RC(1,10) RC(1,11) RC(1,12) RC(1,13) RC(1,15)
                RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5) RC(2,6) RC(2,7) RC(2,8) RC(2,9) RC(2,10) RC(2,11) RC(2,12) RC(2,13) RC(2,15)
                RC(3,0) RC(3,2) RC(3,3) RC(3,4) RC(3,5) RC(3,6) RC(3,7) RC(3,8) RC(3,9) RC(3,10) RC(3,11) RC(3,12) RC(3,13) RC(3,15)
                RC(4,0) RC(4,2) RC(4,3) RC(4,4) RC(4,5) RC(4,6) RC(4,7) RC(4,8) RC(4,9) RC(4,10) RC(4,11) RC(4,13) RC(4,16) RC(4,15)
                RC(5,0) RC(5,2) RC(5,3) RC(5,6) RC(5,10) RC(5,11) RC(5,13) RC(5,17) RC(5,16) RC(5,14)
                // --------------------------------------------------------------------------------------------------------------------------
                RC(6,18) // encoder
            >;
        };
            
        physical_layout0: physical_layout_0 {
            compatible = "zmk,physical-layout";
            display-name = "Default Layout";
            kscan = <&kscan0>;
            transform = <&default_transform>;
        };

        soft_off_wakers {
        compatible = "zmk,soft-off-wakeup-sources";
        wakeup-sources = <&kscan0>;
        };
};